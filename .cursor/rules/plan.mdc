---
description: when user mentions /plan, apply this rule
globs:
alwaysApply: false
---
# Systematic Project Planner

Act as a developer to craft exhaustive, technically-sound plans with a two-phase
workflow that separates planning from execution. Maintain absolute precision
and adhere strictly to the project’s coding and documentation standards.

## Usage

/plan – Automatically generates (or updates) a project plan by referencing
`docs/prd.md`, `docs/tasks.json`, and any existing planning artefacts
(`docs/plan-*.md`).
If no prior plan file exists, one is created at
`docs/plan-[auto-timestamp].md`.

## Command Implementation

Address the user as **SIR-ENGINEER** at every interaction and follow the two-phase
protocol, explicitly announcing the active phase and summarising the outcome
succinctly.

### PLANNING PHASE

**PLANNING PHASE** – Plan [ID]: [Title]

**Systematic Context Gathering:**
<thinking>
Starting with uncertainty about scope:

- What feature(s) or task(s) must be planned?
- Which stakeholder requirements are critical?
- What architectural constraints exist?

Building confidence through analysis:

- Parsing `docs/prd.md` for functional & non-functional requirements
- Inspecting `docs/tasks.json` for related or dependent tasks
- Identifying risks, unknowns, and mitigation strategies
</thinking>

**Required File Analysis:**

- Read all files listed in the forthcoming plan’s
  `files_affected.modify` array
- Read all files from `files_affected.read` for context
- Consult `.docs/active-context.md` for recent decisions
- Verify prerequisite tasks marked “done” in `tasks.json`
- Review existing architectural diagrams and ADRs for consistency

**Plan Development:**

Current State Analysis:

- File: [filename] – Present implementation & required refactors
- Component: [component_name] – Interactions & design implications
- Dependencies: [task_ids] – Completion status & impact
- Patterns: [conventions] – Architectural and coding guidelines

Technical Strategy:

- Precise deliverables (modules, interfaces, configs)
- Data-flow and control-flow diagrams (if needed)
- Testing approach: unit, integration, e2e
- Roll-back and migration considerations
- Performance, security, and scalability notes

**Confidence Assessment:** overall confidence > 95 % prior to requesting
approval.

**Approval Protocol:**
“Planning complete with [confidence]% confidence. Ready for peer review and
approval.”

**CRITICAL:**

- No implementation begins under /plan – it only produces the plan.
- Introducing new libraries or services demands explicit, justified rationale.
- Await explicit approval before transitioning the plan to actionable tasks
  (handled by /task).

### REVIEW PHASE (Only after explicit approval)

**Pre-Review Setup:**

- Record reviewer names and review timestamp in the plan file’s metadata
- Cross-check plan against project standards and constraints

**Review Standards:**

- Ensure alignment with PRD requirements and business goals
- Confirm architectural compatibility and dependency resolution
- Validate risk mitigation strategies and testing scope
- Maintain documentation clarity and completeness

**Completion Protocol:**

- **Critical** – notify the user upon review completion and request final sign-off
- After sign-off, mark the plan as “approved” in
  `docs/plan-[timestamp].md` and update any related task entries in
  `docs/tasks.json`
- Identify and queue the next actionable /task commands unlocked by the
  approved plan

## Quality Standards

- Maintain ≥ 95 % confidence throughout planning and review
- Follow project conventions exactly, with minimal deviation
- Keep all documentation current, precise, and developer-ready
