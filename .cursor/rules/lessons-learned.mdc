# Lessons Learned

This file serves as a learning journal for the project, capturing important patterns, preferences, and project intelligence.

## Key Insights & Patterns

*   **Pattern:** [Describe a recurring pattern, e.g., "Use of ECS for entity management"]
    *   **Context:** [Where is this pattern applied?]
    *   **Reasoning:** [Why is this pattern used? Benefits/Tradeoffs]
    *   **Date:** [YYYY-MM-DD]

*   **Preference:** [Describe a user preference, e.g., "Prefer TDD for core logic"]
    *   **Context:** [How was this preference identified?]
    *   **Date:** [YYYY-MM-DD]

*   **Challenge:** [Describe a known challenge, e.g., "Performance bottleneck in rendering large maps"]
    *   **Context:** [Details about the challenge]
    *   **Status:** [Ongoing/Mitigated/Resolved]
    *   **Date:** [YYYY-MM-DD]

*   **Decision:** [Record a significant project decision, e.g., "Switched from SDL to Tcell for terminal backend"]
    *   **Reasoning:** [Why was the decision made?]
    *   **Date:** [YYYY-MM-DD]

*   **Pattern:** Simplify Go loops over integer ranges.
    *   **Context:** When iterating from 0 up to an integer `n`.
    *   **Reasoning:** Prefer `for i := range n` over `for i := 0; i < n; i++`. The `range` form is more idiomatic and concise in Go for iterating 0 to n-1. Example: Replace `for y := 0; y < height; y++ {` with `for y := range height {`.
    *   **Date:** 2025-03-31

---
