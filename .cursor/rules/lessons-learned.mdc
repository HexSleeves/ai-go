# Lessons Learned

This file serves as a learning journal for the project, capturing important patterns, preferences, and project intelligence.

## Key Insights & Patterns

*   **Pattern:** [Describe a recurring pattern, e.g., "Use of ECS for entity management"]
    *   **Context:** [Where is this pattern applied?]
    *   **Reasoning:** [Why is this pattern used? Benefits/Tradeoffs]
    *   **Date:** [YYYY-MM-DD]

*   **Preference:** [Describe a user preference, e.g., "Prefer TDD for core logic"]
    *   **Context:** [How was this preference identified?]
    *   **Date:** [YYYY-MM-DD]

*   **Challenge:** [Describe a known challenge, e.g., "Performance bottleneck in rendering large maps"]
    *   **Context:** [Details about the challenge]
    *   **Status:** [Ongoing/Mitigated/Resolved]
    *   **Date:** [YYYY-MM-DD]

*   **Decision:** [Record a significant project decision, e.g., "Switched from SDL to Tcell for terminal backend"]
    *   **Reasoning:** [Why was the decision made?]
    *   **Date:** [YYYY-MM-DD]

*   **Pattern:** Simplify Go loops over integer ranges.
    *   **Context:** When iterating from 0 up to an integer `n`.
    *   **Reasoning:** Prefer `for i := range n` over `for i := 0; i < n; i++`. The `range` form is more idiomatic and concise in Go for iterating 0 to n-1. Example: Replace `for y := 0; y < height; y++ {` with `for y := range height {`.
    *   **Date:** 2025-03-31

*   **Pattern:** Input handling pipeline in roguelikes
    *   **Context:** Player movement implementation using gruid's input system
    *   **Reasoning:** Breaking down input handling into distinct layers (key → action → game logic) provides flexibility and maintainability:
        1. Key mapping layer (`input.go`): Maps physical keys to logical actions
        2. Action handling layer (`actions.go`): Converts actions to game effects
        3. Game logic layer (`game.go`): Implements actual movement with collision checks
    *   **Date:** 2025-04-02

*   **Pattern:** Collision detection in grid-based games
    *   **Context:** Player movement implementation
    *   **Reasoning:** Check collisions before updating position to maintain game state consistency:
        1. Get current position
        2. Calculate intended new position
        3. Check for collisions (walls, entities)
        4. Only update position if no collision
    *   **Date:** 2025-04-02

*   **Pattern:** Field of View (FOV) implementation in roguelikes
    *   **Context:** Implementing visibility for the player in a grid-based game
    *   **Reasoning:** FOV is a critical roguelike feature that:
        1. Limits what the player can see based on line-of-sight
        2. Distinguishes between currently visible and previously explored areas
        3. Requires recalculation when player moves or environment changes
        4. Often uses algorithms like shadowcasting or raycasting
    *   **Date:** 2025-04-03

*   **Pattern:** Color management in terminal games
    *   **Context:** Visual representation in terminal-based roguelikes
    *   **Reasoning:** Consistent color scheme improves player experience:
        1. Define color constants to ensure consistency
        2. Use different colors for different game elements (walls, floors, entities)
        3. Use color variations to indicate state (visible vs. explored)
        4. Consider terminal color limitations
    *   **Date:** 2025-04-03

*   **Pattern:** Turn Queue Management with Priority Queue
    *   **Context:** Implementing the turn-based system (`turn.go`, `model_update.go`).
    *   **Reasoning:** Using `container/heap` as a priority queue (`TurnQueue`) allows efficient management of actor turns based on their scheduled time. Actors are added with a future time, and the queue always provides the actor with the earliest scheduled turn. This is fundamental for energy cost / speed-based turn systems.
    *   **Date:** 2025-04-05

*   **Pattern:** Action Cost System via Interface
    *   **Context:** Implementing the turn-based system (`turn.go`, `actions.go`).
    *   **Reasoning:** Defining a `GameAction` interface with an `Execute` method that returns an action `cost` (time units) provides a flexible way to handle variable turn durations. Different actions (moving, attacking, waiting) can consume different amounts of time, which is then used to calculate the actor's next scheduled turn time when re-adding them to the `TurnQueue`.
    *   **Date:** 2025-04-05

---
