---
description:
globs: *.go
alwaysApply: false
---
# Go Code Style and Formatting

- **GoFmt and GoImports**: Always run `go fmt` and `goimports` to ensure consistent formatting and organized imports. This eliminates stylistic debates and ensures readability.
  ```bash
  # ✅ DO: Run these commands regularly.
  go fmt ./...
  goimports -w ./...
  ```

- **Meaningful Comments**: Write clear, concise, and meaningful comments where necessary, especially for exported functions, types, and complex logic. Comments should explain *why* something is done, not just *what*.
  ```go
  // ✅ DO: Document exported functions.
  // CalculateTotal calculates the sum of all elements in a slice of integers.
  func CalculateTotal(numbers []int) int {
      total := 0
      for _, n := range numbers {
          total += n
      }
      return total
  }

  // ❌ DON'T: Redundant or obvious comments.
  // func Add(a, b int) int { // Add two numbers
  //     return a + b // Return sum
  // }
  ```

- **No Magic Numbers/Strings**: Replace hardcoded values with named constants or variables to improve readability and maintainability.
  ```go
  // ✅ DO: Use named constants.
  const MaxRetries = 3
  const DefaultTimeout = 5 * time.Second

  // ❌ DON'T: Use unnamed magic values.
  // if attempts > 3 {
  //     // ...
  // }
  // time.Sleep(5 * time.Second)
  ```

- **Handle Panics at the Edge (if necessary)**: While generally avoided for recoverable errors, if `panic` is used for unrecoverable errors (e.g., during startup), ensure a `recover` mechanism is in place at the program's entry point to gracefully shut down or log the panic.
  ```go
  // ✅ DO: Recover from panics at the application's edge.
  func main() {
      defer func() {
          if r := recover(); r != nil {
              log.Fatalf("Application panicked: %v", r)
          }
      }()
      runApp()
  }
  ```

- **Zero Value Principle**: Understand and utilize Go's zero-value principle. Initialize variables implicitly to their zero values rather than explicitly, unless there's a specific reason.
  ```go
  // ✅ DO: Rely on zero values.
  var s string
  var i int
  var b bool
  var p *MyType

  // ❌ DON'T: Explicitly initialize to zero values unless necessary.
  // var s string = ""
  // var i int = 0
  // var b bool = false
  // var p *MyType = nil
  ```

- **Initialize Structs Concisely**: When initializing structs, use field names explicitly for clarity, especially if not all fields are being set or if the order might change.
  ```go
  // ✅ DO: Use named fields for clarity.
  user := User{
      Name:  "Alice",
      Email: "alice@example.com",
  }

  // ❌ DON'T: Rely on field order (fragile).
  // user := User{"Alice", "alice@example.com", 0}
  ```
